#version 450

#define M_PI 3.1415926535897932384626433832795

uniform vec2 resolution;
uniform vec3 origin;
uniform vec3 target;
uniform vec3 upvec;
uniform vec3 leftvec;
uniform float time;


float PlaneSDF(vec3 point, vec3 normal)
{
    float A = normal.x;
    float B = normal.y;
    float C = normal.z;
    return (A * point.x + B * point.y + C * point.z) /
    sqrt(A * A + B * B + C * C);
}

float sineplaneSDF(vec3 point)
{
    float d1 = PlaneSDF(point - vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));
    float d2 = sin(point.x) * sin(point.z);
    return d1 + d2;
}

float SphereSDF(vec3 point)
{
    return length(point) - 1.0;
}

float BoxSDF(vec3 point, vec3 dim)
{
    vec3 tmp = abs(point) - dim;
    return length(max(tmp, 0.0)) + min(max(tmp.x, max(tmp.y, tmp.z)), 0.0);
}

float TorusSDF(vec3 point, vec2 dim)
{
    vec2 tmp = vec2(length(point.xz) - dim.x, point.y);
    return length(tmp) - dim.y;
}

float InterSDF(vec3 point)
{
    float sphere1 = SphereSDF(point - vec3(10.0, 10.0, cos(time * 0.001)));
    float sphere2 = SphereSDF(point - vec3(10.0, 10.0, -1.0));
    float floor = PlaneSDF(point - vec3(0, 0, 0), vec3(0, 1, 0));

    return min(max(sphere1, sphere2), floor);
}

float UnionSDF(vec3 point)
{
//    float box = BoxSDF(point - vec3(10.0, 10.0, cos(time * 0.001)), vec3(1.1, 1.1, 1.1));
    float box = TorusSDF(point - vec3(10.0, 10.0, cos(time * 0.001)), vec2(1.0, 0.5));
    float sphere = SphereSDF(point - vec3(10.0, 10.0, -1.0));
    float floor = PlaneSDF(point - vec3(0, 0, 0), vec3(0, 1, 0));

    return min(max(sphere, -1.0 * box), floor);
//    return min(min(sphere, box), floor);
}

float SDF(vec3 point)
{
    return UnionSDF(point);
}

vec3 trace(vec3 origin, vec3 raydir)
{
    float max_depth = 200.0;
    vec3 cpoint = origin;
    float curdist = 0.0f;
    for (int i = 0; i < 255; i++)
    {
        float cdistance = SDF(cpoint);
        if (cdistance < 0.001)
        return cpoint;
        cpoint = cpoint + (cdistance * raydir);
        if (distance(origin, cpoint) > max_depth)
        return vec3(1.23456789, 1.23456789, 1.23456789);
    }
    return vec3(1.23456789, 1.23456789, 1.23456789);
}

vec3 normalscene(vec3 p)
{
    float epsilon = 0.1;
    return vec3(
    SDF(vec3(p.x + epsilon, p.y, p.z)) - SDF(vec3(p.x - epsilon, p.y, p.z)),
    SDF(vec3(p.x, p.y + epsilon, p.z)) - SDF(vec3(p.x, p.y - epsilon, p.z)),
    SDF(vec3(p.x, p.y, p.z + epsilon)) - SDF(vec3(p.x, p.y, p.z - epsilon)));
}

in vec4 gl_FragCoord;
out vec4 color;

void main()
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = gl_FragCoord.xy / resolution;
    vec2 range = uv - 0.5;

    //vec3 origin = vec3(0, 10.0, 0);
    vec3 target = vec3(1.0, 0.0, 0.0);
    //target = normalize(target);

    // float theta = 45.0 * cos(iTime*0.2);
    // float theta = (iMouse.x / iResolution.x) * 10.0;
    //    mat3 yrotmat = mat3(
    //    cos(theta), 0, sin(theta),
    //    0, 1, 0,
    //    sin(theta), 0, cos(theta));
    //    origin = yrotmat * origin;
    //    target = yrotmat * target;

    vec3 upvec = vec3(0.0, 1.0, 0.0);
    vec3 leftvec = normalize(cross(target, upvec));
    float cameraanglex = 90.0;
    float cameraangley = 60.0;
    float zmin = 10.0;

    float halfscreensizex = tan((cameraanglex / 2.0) * (M_PI / 180.0)) * zmin;
    float halfscreensizey = tan((cameraangley / 2.0) * (M_PI / 180.0)) * zmin;

    vec3 screenpoint = origin + zmin * target;
    screenpoint = screenpoint + leftvec * halfscreensizex * range.x;
    screenpoint = screenpoint + upvec   * halfscreensizey * range.y;
    vec3 raydir = normalize(screenpoint - origin);

    vec3 lightpos = vec3(-100, 100, -100);

    float theta = 45.0 * cos(time * 0.0001);
    // float theta = (iMouse.x / iResolution.x) * 10.0;
        mat3 yrotmat = mat3(
        cos(theta), 0, sin(theta),
        0, 1, 0,
        sin(theta), 0, cos(theta));
    lightpos = yrotmat * lightpos;

    vec3 closepoint = trace(origin, raydir);
    if (closepoint.x != 1.23456789)
    {
        vec3 lightdir = normalize(lightpos - closepoint);
        vec3 normaldir = normalize(normalscene(closepoint));
        float dotproduct = dot(normaldir, lightdir);
        vec3 color3 = dotproduct * vec3(0.0, 0.0, 1.0);
        // color = vec4(color3, 1.0);
        vec3 reflectdir = raydir - normaldir * dot(raydir, normaldir) * 2;
        float dotproduct2 = pow(dot(reflectdir, lightdir), 1.0); // objres->getTextureNs(pointresult)
        color3 = color3 +
        vec3(1.0, 1.0, 1.0) * 0.4 * // objres->getTextureKs(pointresult)
        1.0 * // light->getintensity
        dotproduct2;

        // RETURN
        color = vec4(color3, 1.0);
    }
    else
    {
        // Time varying pixel color
        // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

        // Output to screen

        // RETURN
        color = vec4(vec3(1.0, 0.0, 0.0), 1.0);
    }
}
